/**
 * Express.js & dms-client-channel example implementation
 */
const express = require("express");
const app = express();
const port = process.env.PORT || 3000;

/**
 * Define config locally. Alternate options below.
 */
 const DMS_CONFIG = {
    JWT_SECRET: "your jwt secret here",
    CHANNEL_ID: "your channel id here",
    API_URL: "your api url here",
 };

/**
 * Alternate Option - uncomment below to use
 * Import from json file example see dms_config.json.example in node_modules/dms-client-channel folder for file reference. 
 * The path defined in this example assumes the dms_config.json file is available in the same directory.  
 */
//const dmsConfig = require('./dms_config.json');

/**
 * Alternate Option - uncomment below to use
 * Import configs from process enviroment variables 
 */
// const dmsConfig = {
//     JWT_SECRET: process.env.DMS_JWT_SECRET,
//     CHANNEL_ID: process.env.DMS_CHANNEL_ID,
//     API_URL: process.env.DMS_API_URL ,
// };
  
const dmsClientChannel = require("dms-client-channel");
let dms = dmsClientChannel(DMS_CONFIG);

//Enable request logging in DMS module
dms.logRequests(true);

//to force JSON parser middleware
app.use(express.json());


/**
 * Handle Signal interuption gracefully
 * This terminates the process on Ctrl + C input when running the application locally through terminal
 */
process.on("SIGINT", function() {
  process.exit();
});



//ENDPOINTS

/**
 * /clientChannel endpoint to recieve messages from the client channel (e.g. slack, webex teams, etc.)
 * 
 */
app.post('/clientChannel', async (req, res) => {
  try {
    //Hardcoded for now
    dms.sendTextMessage("CustomerID", "MessageID", req.body.message, "Customer Name", function(response) {
      //Return status from DMS
      return res.status(response.status).send(response.statusText);
    });


  } catch (err) {
    return res.status(401).send(err);
  }


});


/**
 * /dms endpoint to recieive messages from the DMS layer
 * 
 */
app.post('/dms', async (req, res) => {
  try {
    //call the DMS on request method everytime a request is recieved and pass in the request 
    dms.onRequest(req, async (status, message) => {
      res.status(status).send(message);
    });

  } catch (err) {
    return res.status(401).send(err);
  }
});

//Called when a typing indicator is recieved from the DMS
dms.onTypingIndicator = async (customer_id) => {
  console.log("onTypingIndicator callback. customer_id: " + customer_id);
  //call client api to send typing indicator...

}


//Called when a text message is recieved from the DMS
dms.onTextMessage = async (message) => {
  console.log("onTextMessage callback. message:" + message.text);

  //translate message from DMS-format to client chanel format...

  //call send api on client channel to send the message...

}

app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
})

